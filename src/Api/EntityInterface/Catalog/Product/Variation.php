<?php
/**
 * B2W Digital - Companhia Digital
 *
 * Do not edit this file if you want to update this SDK for future new versions.
 * For support please contact the e-mail bellow:
 *
 * sdk@e-smart.com.br
 *
 * @category  BSeller
 * @package   BSeller
 *
 * @copyright Copyright (c) 2018 B2W Digital - BIT Tools Platform. .
 *
 * @author    Julio Reis <julio.reis@b2wdigital.com>
 */

namespace BSeller\Api\EntityInterface\Catalog\Product;

use BSeller\Api\EntityInterface\EntityAbstract;

class Variation extends EntityAbstract
{
    /** @var array */
    protected $data = [];

    /**
     * @return int
     */
    public function getId()
    {
        return (int) $this->getData('id');
    }

    /**
     * @param int $id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->setData('id', (int)$id);
        return $this;
    }

    /**
     * @return string
     */
    public function getNome()
    {
        return (string) $this->getData('nome');
    }

    /**
     * @param string $nome
     *
     * @return $this
     */
    public function setNome($nome)
    {
        $this->setData('nome', (string)$nome);
        return $this;
    }

    /**
     * @return array
     */
    public function getSpecifications()
    {
        return (array) $this->getData('specifications');
    }

    /**
     * @param int $id
     * @param string $nome
     * @return string
     */
    public function addSpecification($id, $nome)
    {
        $specifications = $this->getSpecifications();

        /** @var array $_specification */
        foreach ($specifications as $_specification) {
            if ($_specification['id'] == $id) {
                return $this;
            }
        }

        $specifications[] = ['id' => $id, 'nome' => $nome];

        $this->setData('specifications', $specifications);

        return $this;
    }

    /**
     * @return array|bool|mixed|string
     */
    public function export()
    {
        $data = (array)$this->getData();
        return (array)['specifications' => $data];
    }

    /**
     * @return \BSeller\Api\Handler\Response\HandlerInterface
     */
    public function create()
    {
        $this->validate();

        /** @var \BSeller\Api\Handler\Request\Catalog\Product\VariationHandler $handler */
        $handler = $this->requestHandler();

        /** @var \BSeller\Api\Handler\Response\HandlerInterface $response */
        $response = $handler->create(
            $this->getNome(),
            $this->getId(),
            $this->getSpecifications()
        );

        return $response;
    }

    /**
     * @return \BSeller\Api\Handler\Response\HandlerInterface
     */
    public function update()
    {
        $this->validate();

        /** @var \BSeller\Api\Handler\Request\Catalog\Product\VariationHandler $handler */
        $handler = $this->requestHandler();

        /** @var \BSeller\Api\Handler\Response\HandlerInterface $response */
        $response = $handler->update(
            $this->getNome(),
            $this->getId(),
            $this->getSpecifications()
        );

        return $response;
    }

    /**
     * @return \BSeller\Api\Handler\Response\HandlerInterface
     */
    public function delete($idTipoVariacao, $idVariacao)
    {
        /** @var \BSeller\Api\Handler\Request\Catalog\Product\VariationHandler $handler */
        $handler = $this->requestHandler();

        /** @var \BSeller\Api\Handler\Response\HandlerInterface $response */
        $response = $handler->delete($idTipoVariacao, $idVariacao);

        return $response;
    }

    /**
     * @return \BSeller\Api\Handler\Response\HandlerInterface
     */
    public function variations()
    {
        /** @var \BSeller\Api\Handler\Request\Catalog\Product\VariationHandler $handler */
        $handler = $this->requestHandler();

        /** @var \BSeller\Api\Handler\Response\HandlerInterface $response */
        $response = $handler->variations();

        return $response;
    }
}